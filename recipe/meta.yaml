{% set name = "fluidfft" %}
{% set version = "0.3.1" %}
{% set build = 0 %}
# ensure mpi is defined (needed for conda-smithy recipe-lint)
{% set mpi = mpi or 'nompi' %}

{% if mpi == 'nompi' %}
# prioritize nompi variant via build number
{% set build = build + 100 %}
{% endif %}


package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 380d67c9b073daff17961f4bf07d571dd0281da21175577cea3e825257fffe42

build:
  number: {{ build }}
  # add build string so packages can depend on
  # mpi or nompi variants explicitly:
  # `pkg * mpi_mpich_*` for mpich
  # `pkg * mpi_*` for any mpi
  # `pkg * nompi_*` for no mpi

  {% if mpi != 'nompi' %}
  {% set mpi_prefix = "mpi_" + mpi %}
  {% else %}
  {% set mpi_prefix = "nompi" %}
  {% endif %}
  string: {{ mpi_prefix }}_h{{ PKG_HASH }}_{{ build }}

  {% if mpi != 'nompi' %}

  run_exports:
    - {{ name }} * {{ mpi_prefix }}_*
  {% endif %}

  # skip: true  # [win and (mpi != 'nompi')]
  skip: true  # [win]
  entry_points:
    - fluidfft-bench = fluidfft.bench:run
    - fluidfft-bench-analysis = fluidfft.bench_analysis:run

requirements:
  build:
    - {{ compiler('cxx') }}
  host:
    - pip
    - python >=3.6
    - {{ mpi }}  # [ mpi != 'nompi' ]
    - openssh  # [ mpi == 'openmpi' ]
    - transonic
    - fftw
    - fftw * mpi_{{ mpi }}_*  # [mpi != 'nompi']
    - jinja2
    - cython
    - mpi4py  # [ mpi != 'nompi' ]
    - pythran  # [ not win ]
    - libblas
    - libcblas
  run:
    - {{ mpi }}  # [ mpi != 'nompi' ]
    - openssh  # [ mpi == 'openmpi' ]
    - fluiddyn
    - fluiddyn * mpi_{{ mpi }}_*  # [mpi != 'nompi']
    - pandas
    - transonic
    - fftw
    - fftw * mpi_{{ mpi }}_*  # [mpi != 'nompi']
    - pyfftw

test:
  imports:
    - fluidfft
    - fluidfft.bench
    - fluidfft.bench_analysis
    - fluidfft.fft2d
    - fluidfft.fft3d
    - fluidfft.test_init
    - fluidfft.util
    - fluidfft.fft2d.with_fftw2d
    - fluidfft.fft3d.with_fftw3d
    - fluidfft.fft2d.mpi_with_fftw1d  # [ mpi != 'nompi' ]
    - fluidfft.fft3d.mpi_with_fftw1d  # [ mpi != 'nompi' ]
    - fluidfft.fft2d.mpi_with_fftwmpi2d  # [ mpi != 'nompi' ]
    - fluidfft.fft3d.mpi_with_fftwmpi3d  # [ mpi != 'nompi' ]
  commands:
    - fluidfft-bench
    - fluidfft-bench-analysis
    - fluidfft-bench 32 -d 3

about:
  home: https://bitbucket.org/fluiddyn/fluidfft
  license: CeCILL-B
  license_file: LICENSE.txt
  summary: Efficient and easy Fast Fourier Transform (FFT) for Python.
  description: |
    Fluidfft provides C++ classes and their Python wrapper classes written in
    Cython useful to perform Fast Fourier Transform (FFT) with different
    libraries
  doc_url: https://fluidfft.readthedocs.io

extra:
  recipe-maintainers:
    - CyrilleBonamy
    - paugier
